<?php

/**
 * @file
 * The OpenEuropa Authorisation module.
 */

declare(strict_types = 1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\Core\Site\Settings;
use Drupal\user\RoleInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the Account form to disable role options.
 */
function oe_authorisation_form_user_form_alter(&$form, FormStateInterface $form_state): void {
  // Find the global user roles.
  $roles = array_filter(user_roles(), function (RoleInterface $role) {
    return (bool) $role->getThirdPartySetting('oe_authorisation', 'global', FALSE);
  });

  if (!$roles) {
    return;
  }

  // Unset the global roles from the list of assignable roles.
  foreach ($form['account']['roles']['#options'] as $machine => $name) {
    if (in_array($machine, array_keys($roles))) {
      $form['account']['roles'][$machine]['#disabled'] = TRUE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the permissions form to disable all options.
 */
function oe_authorisation_form_user_admin_permissions_alter(&$form, FormStateInterface $form_state): void {

  // If role CRUD isn't disabled don't change it.
  if (Settings::get('oe_authorisation_role_crud_enabled', FALSE)) {
    return;
  }

  // Disable submit button.
  $form['actions']['submit']['#access'] = FALSE;

  // Adds warning message.
  \Drupal::messenger()->addMessage(t('Role management is disabled in EWCMS. Roles and associated permissions are only changeable through code.'), MessengerInterface::TYPE_WARNING);

  // Get actual roles and permissions and disable the checkbox.
  $role_names = $form['role_names']['#value'];

  $permissions_handler = Drupal::service('user.permissions');
  $permissions = $permissions_handler->getPermissions();

  $permissions_by_provider = [];
  foreach ($permissions as $permission_name => $permission) {
    $permissions_by_provider[$permission['provider']][$permission_name] = $permission;
  }

  foreach ($role_names as $rid => $name) {
    foreach ($permissions_by_provider as $provider => $permissions) {
      foreach ($permissions as $perm => $permisssion) {
        $form['permissions'][$perm][$rid]['#attributes']['disabled'] = TRUE;
      }
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the roles form to prevent role editing and deletion.
 */
function oe_authorisation_form_user_admin_roles_form_alter(&$form, FormStateInterface $form_state): void {

  // If role CRUD isn't disabled don't change it.
  if (Settings::get('oe_authorisation_role_crud_enabled', FALSE)) {
    return;
  }

  if (empty($form['entities'])) {
    return;
  }

  foreach ($form['entities'] as &$entity) {
    if (is_array($entity) && isset($entity['operations']) && is_array($entity['operations'])) {
      unset($entity['operations']['data']['#links']['edit']);
      unset($entity['operations']['data']['#links']['delete']);
    }
  }

}
